// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* The estimated probability that the hand motion between the current\n* frame and the specified frame is intended to be a translating motion.\n\n* \\include Hand_translationProbability.txt\n\n* If a corresponding Hand object is not found in sinceFrame, or if either\n* this frame or sinceFrame are invalid Frame objects, then this method\n* returns zero.\n\n* @param sinceFrame The starting frame for computing the translation.\n* @returns A value between 0 and 1 representing the estimated probability\n* that the hand motion between the current frame and the specified frame\n* is intended to be a translating motion.\n* @since 1.0\n\nSupported types:\n  this: LeapHand\n  sinceFrame: LeapFrame\n  result: Float32\n"
    },
  "title" : "TranslationProbability[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapHand[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "LeapFrame[]" : [
          null
          ]
        },
      "name" : "sinceFrame",
      "execPortType" : "In",
      "typeSpec" : "LeapFrame[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "Float32[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "74E9860C502C34BF7D68D25D2EA0CEB7",
  "code" : "require LeapMotion;

operator LeapMotion_LeapHand_translationProbability_task<<<index>>>(
  io Float32[] result
, in LeapHand[] this
, in LeapFrame[] sinceFrame
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].translationProbability(sinceFrame[index < sinceFrame.size() ? index : sinceFrame.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( sinceFrame.size() == 0) return;
  Size task_size = this.size();
  if(task_size < sinceFrame.size()) task_size = sinceFrame.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      LeapMotion_LeapHand_translationProbability_task(index, result, this, sinceFrame);
    }
  } else {
    LeapMotion_LeapHand_translationProbability_task<<<task_size>>>(result, this, sinceFrame);
  }
}
"
  }