// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* The angle of view along the z axis of this device.\n\n* \\image html images/Leap_verticalViewAngle.png\n\n* The Leap Motion controller scans a region in the shape of an inverted pyramid\n* centered at the device's center and extending upwards. The verticalViewAngle\n* reports the view angle along the short dimension of the device.\n\n* \\include Device_verticalViewAngle.txt\n\n* @returns The vertical angle of view in radians.\n* @since 1.0\n\nSupported types:\n  this: LeapDevice\n  result: Float32\n"
    },
  "title" : "VerticalViewAngle[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapDevice[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "Float32[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "70D0DFEAE0B0140C1B565E2DEF848DC0",
  "code" : "require LeapMotion;

operator LeapMotion_LeapDevice_verticalViewAngle_task<<<index>>>(
  io Float32[] result
, in LeapDevice[] this
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].verticalViewAngle();
}

dfgEntry {
  if( this.size() == 0) return;
  Size task_size = this.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      LeapMotion_LeapDevice_verticalViewAngle_task(index, result, this);
    }
  } else {
    LeapMotion_LeapDevice_verticalViewAngle_task<<<task_size>>>(result, this);
  }
}
"
  }