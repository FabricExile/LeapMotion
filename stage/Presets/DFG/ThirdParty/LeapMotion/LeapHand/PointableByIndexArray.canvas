// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "overload to get a pointable by index\n\n Supported by LeapHand"
    },
  "title" : "PointableByIndex[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapHand[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "SInt32[]" : [
          0
          ]
        },
      "name" : "index",
      "execPortType" : "In",
      "typeSpec" : "SInt32[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "LeapPointable[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "1896BA9D8FB4DC610F4AE9D8C372FDAD",
  "code" : "require LeapMotion;\n\noperator LeapMotion_LeapHand_pointableByIndex_task<<<index>>>(\n  io LeapPointable[] result\n, in LeapHand[] this\n, in SInt32[] index\n) {\n  result[index] = this[index < this.size() ? index : this.size() - 1].pointableByIndex(index[index < index.size() ? index : index.size() - 1]);\n}\n\ndfgEntry {\n  if( this.size() == 0) return;\n  if( index.size() == 0) return;\n  Size task_size = this.size();\n  if(task_size < index.size()) task_size = index.size();\n  result.resize(task_size);\n  if(task_size < 10000 /* pex margin */) {\n    for(Size index = 0; index < task_size; index++) {\n      LeapMotion_LeapHand_pointableByIndex_task(index, result, this, index);\n    }\n  } else {\n    LeapMotion_LeapHand_pointableByIndex_task<<<task_size>>>(result, this, index);\n  }\n}\n"
  }