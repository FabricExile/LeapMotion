// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* The estimated probability that the overall motion between the current\n* frame and the specified frame is intended to be a rotating motion.\n\n* \\include Frame_rotationProbability.txt\n\n* If either this frame or sinceFrame is an invalid Frame object, then this\n* method returns zero.\n\n* @param sinceFrame The starting frame for computing the relative rotation.\n* @returns A value between 0 and 1 representing the estimated probability\n* that the overall motion between the current frame and the specified frame\n* is intended to be a rotating motion.\n* @since 1.0\n\n\n Supported by LeapFrame"
    },
  "title" : "RotationProbability[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapFrame[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "sinceFrame",
      "execPortType" : "In",
      "typeSpec" : "LeapFrame[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "Float32[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "3E72DD8DD8769AC3A934D33C53258BF0",
  "code" : "require LeapMotion;

operator LeapMotion_LeapFrame_rotationProbability_task<<<index>>>(
  io Float32[] result
, in LeapFrame[] this
, in LeapFrame[] sinceFrame
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].rotationProbability(sinceFrame[index < sinceFrame.size() ? index : sinceFrame.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( sinceFrame.size() == 0) return;
  Size task_size = this.size();
  if(task_size < sinceFrame.size()) task_size = sinceFrame.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      LeapMotion_LeapFrame_rotationProbability_task(index, result, this, sinceFrame);
    }
  } else {
    LeapMotion_LeapFrame_rotationProbability_task<<<task_size>>>(result, this, sinceFrame);
  }
}
"
  }