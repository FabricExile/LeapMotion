/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

/**
 * The Finger class represents a tracked finger.
 *
 * Fingers are Pointable objects that the Leap Motion software has classified as a finger.
 * Get valid Finger objects from a Frame or a Hand object.
 *
 * Fingers may be permanently associated to a hand. In this case the angular order of the finger IDs
 * will be invariant. As fingers move in and out of view it is possible for the guessed ID
 * of a finger to be incorrect. Consequently, it may be necessary for finger IDs to be
 * exchanged. All tracked properties, such as velocity, will remain continuous in the API.
 * However, quantities that are derived from the API output (such as a history of positions)
 * will be discontinuous unless they have a corresponding ID exchange.
 *
 * Note that Finger objects can be invalid, which means that they do not contain
 * valid tracking data and do not correspond to a physical finger. Invalid Finger
 * objects can be the result of asking for a Finger object using an ID from an
 * earlier frame when no Finger objects with that ID exist in the current frame.
 * A Finger object created from the Finger constructor is also invalid.
 * Test for validity with the Finger::isValid() function.
 * @since 1.0
 */
object LeapFinger {
  /// \internal
  Data handle;
};

/// \internal
function ~LeapFinger() = "LeapFinger_Destruct";

/// returns true if this controller is valid
function Boolean LeapFinger.valid() {
  Data nullData;
  return this.handle == nullData;
}

/**
 * Enumerates the names of the fingers.
 *
 * Members of this enumeration are returned by Finger::type() to identify a
 * Finger object.
 * @since 2.0
 */
const UInt32 LEAP_FINGERTYPE_THUMB  = 0; /**< The thumb */
const UInt32 LEAP_FINGERTYPE_INDEX  = 1; /**< The index or fore-finger */
const UInt32 LEAP_FINGERTYPE_MIDDLE = 2; /**< The middle finger */
const UInt32 LEAP_FINGERTYPE_RING   = 3; /**< The ring finger */
const UInt32 LEAP_FINGERTYPE_PINKY  = 4;  /**< The pinky or little finger */

/**
 * The bone at a given bone index on this finger.
 *
 * \include Bone_iteration.txt
 *
 * @param boneIx An index value from the Bone::Type enumeration identifying the
 * bone of interest.
 * @returns The Bone that has the specified bone type.
 * @since 2.0
 */
function LeapBone LeapFinger.bone(UInt32 boneIx) = "LeapFinger_bone";

/**
 * The name of this finger.
 *
 * \include Finger_type.txt
 *
 * @returns The anatomical type of this finger as a member of the Finger::Type
 * enumeration.
 * @since 2.0
 */
function UInt32 LeapFinger.fingerType() = "LeapFinger_fingerType";
