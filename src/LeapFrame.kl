/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
 * The Frame class represents a set of hand and finger tracking data detected
 * in a single frame.
 *
 * The Leap Motion software detects hands, fingers and tools within the tracking area, reporting
 * their positions, orientations, gestures, and motions in frames at the Leap Motion frame rate.
 *
 * Access Frame objects through an instance of the Controller class:
 *
 * \include Controller_Frame_1.txt
 *
 * Implement a Listener subclass to receive a callback event when a new Frame is available.
 * @since 1.0
 */
object LeapFrame {
  /// \internal
  Data handle;
};

/// \internal
function ~LeapFrame() = "LeapFrame_Destruct";

/// returns true if this controller is valid
function Boolean LeapFrame.valid() {
  Data nullData;
  return this.handle == nullData;
}

/**
 * A unique ID for this Frame.
 *
 * Consecutive frames processed by the Leap Motion software have consecutive
 * increasing values. You can use the frame ID to avoid processing the same
 * Frame object twice:
 *
 * \include Frame_Duplicate.txt
 *
 * As well as to make sure that your application processes every frame:
 *
 * \include Frame_Skipped.txt
 *
 * @returns The frame ID.
 * @since 1.0
 */
function UInt64 LeapFrame.id() = "LeapFrame_id";

/**
 * The frame capture time in microseconds elapsed since the Leap started.
 *
 * \include Frame_timestamp.txt
 *
 * @returns The timestamp in microseconds.
 * @since 1.0
 */
function UInt64 LeapFrame.timestamp() = "LeapFrame_timestamp";

/**
 * The list of Hand objects detected in this frame, given in arbitrary order.
 * The list can be empty if no hands are detected.
 *
 * \include Frame_hands.txt
 *
 * @returns The HandList containing all Hand objects detected in this frame.
 * @since 1.0
 */
function LeapHand[] LeapFrame.hands() = "LeapFrame_hands";

/**
 * The Hand object with the specified ID in this frame.
 *
 * Use the Frame::hand() function to retrieve the Hand object from
 * this frame using an ID value obtained from a previous frame.
 * This function always returns a Hand object, but if no hand
 * with the specified ID is present, an invalid Hand object is returned.
 *
 * \include Frame_hand.txt
 *
 * Note that ID values persist across frames, but only until tracking of a
 * particular object is lost. If tracking of a hand is lost and subsequently
 * regained, the new Hand object representing that physical hand may have
 * a different ID than that representing the physical hand in an earlier frame.
 *
 * @param id The ID value of a Hand object from a previous frame.
 * @returns The Hand object with the matching ID if one exists in this frame;
 * otherwise, an invalid Hand object is returned.
 * @since 1.0
 */
function LeapHand LeapFrame.hand(SInt32 id) = "LeapFrame_hand";

/**
 * The list of Pointable objects (fingers and tools) detected in this frame,
 * given in arbitrary order. The list can be empty if no fingers or tools are detected.
 *
 * Use PointableList::extended() to remove non-extended fingers from the list.
 *
 * \include Frame_pointables.txt
 *
 * @returns The PointableList containing all Pointable objects detected in this frame.
 * @since 1.0
 */
function LeapPointable[] LeapFrame.pointables() = "LeapFrame_pointables";

/**
 * The Pointable object with the specified ID in this frame.
 *
 * Use the Frame::pointable() function to retrieve the Pointable object from
 * this frame using an ID value obtained from a previous frame.
 * This function always returns a Pointable object, but if no finger or tool
 * with the specified ID is present, an invalid Pointable object is returned.
 *
 * \include Frame_pointable.txt
 *
 * Note that ID values persist across frames, but only until tracking of a
 * particular object is lost. If tracking of a finger or tool is lost and subsequently
 * regained, the new Pointable object representing that finger or tool may have
 * a different ID than that representing the finger or tool in an earlier frame.
 *
 * @param id The ID value of a Pointable object from a previous frame.
 * @returns The Pointable object with the matching ID if one exists in this frame;
 * otherwise, an invalid Pointable object is returned.
 * @since 1.0
 */
function LeapPointable LeapFrame.pointable(SInt32 id) = "LeapFrame_pointable";

/**
 * The list of Finger objects detected in this frame, given in arbitrary order.
 * The list can be empty if no fingers are detected.
 *
 * Use PointableList::extended() to remove non-extended fingers from the list.
 *
 * \include Frame_fingers.txt
 *
 * @returns The FingerList containing all Finger objects detected in this frame.
 * @since 1.0
 */
function LeapFinger[] LeapFrame.fingers() = "LeapFrame_fingers";

/**
 * The Finger object with the specified ID in this frame.
 *
 * Use the Frame::finger() function to retrieve the Finger object from
 * this frame using an ID value obtained from a previous frame.
 * This function always returns a Finger object, but if no finger
 * with the specified ID is present, an invalid Finger object is returned.
 *
 * \include Frame_finger.txt
 *
 * Note that ID values persist across frames, but only until tracking of a
 * particular object is lost. If tracking of a finger is lost and subsequently
 * regained, the new Finger object representing that physical finger may have
 * a different ID than that representing the finger in an earlier frame.
 *
 * @param id The ID value of a Finger object from a previous frame.
 * @returns The Finger object with the matching ID if one exists in this frame;
 * otherwise, an invalid Finger object is returned.
 * @since 1.0
 */
function LeapFinger LeapFrame.finger(SInt32 id) = "LeapFrame_finger";

/**
 * The list of Tool objects detected in this frame, given in arbitrary order.
 * The list can be empty if no tools are detected.
 *
 * \include Frame_tools.txt
 *
 * @returns The ToolList containing all Tool objects detected in this frame.
 * @since 1.0
 */
function LeapTool[] LeapFrame.tools() = "LeapFrame_tools";

/**
 * The Tool object with the specified ID in this frame.
 *
 * Use the Frame::tool() function to retrieve the Tool object from
 * this frame using an ID value obtained from a previous frame.
 * This function always returns a Tool object, but if no tool
 * with the specified ID is present, an invalid Tool object is returned.
 *
 * \include Frame_tool.txt
 *
 * Note that ID values persist across frames, but only until tracking of a
 * particular object is lost. If tracking of a tool is lost and subsequently
 * regained, the new Tool object representing that tool may have a
 * different ID than that representing the tool in an earlier frame.
 *
 * @param id The ID value of a Tool object from a previous frame.
 * @returns The Tool object with the matching ID if one exists in this frame;
 * otherwise, an invalid Tool object is returned.
 * @since 1.0
 */
function LeapTool LeapFrame.tool(SInt32 id) = "LeapFrame_tool";

/**
 * The Gesture object with the specified ID in this frame.
 *
 * Use the Frame::gesture() function to return a Gesture object in this
 * frame using an ID obtained in an earlier frame. The function always
 * returns a Gesture object, but if there was no update for the gesture in
 * this frame, then an invalid Gesture object is returned.
 *
 * \include Frame_gesture.txt
 *
 * All Gesture objects representing the same recognized movement share the
 * same ID.
 * @param id The ID of an Gesture object from a previous frame.
 * @returns The Gesture object in the frame with the specified ID if one
 * exists; Otherwise, an Invalid Gesture object.
 * @since 1.0
 */
function LeapGesture LeapFrame.gesture(SInt32 id) = "LeapFrame_gesture";

/**
 * The gestures recognized or continuing in this frame.
 *
 * \include Frame_gestures_now.txt
 *
 * Circle and swipe gestures are updated every frame. Tap gestures
 * only appear in the list  for a single frame.
 *
 * @return GestureList the list of gestures.
 * @since 1.0
 */
function LeapGesture[] LeapFrame.gestures() = "LeapFrame_gestures";

/**
 * Returns a GestureList containing all gestures that have occurred since
 * the specified frame.
 *
 * \include Frame_gestures_since.txt
 *
 * @param sinceFrame An earlier Frame object. The starting frame must
 * still be in the frame history cache, which has a default length of
 * 60 frames.
 * @return GestureList The list of the Gesture objects that have occurred
 * since the specified frame.
 * @since 1.0
 */
function LeapGesture[] LeapFrame.gestures(LeapFrame sinceFrame) = "LeapFrame_gestures_sinceFrame";

/**
 *  The list of images from the Leap Motion cameras.
 *  
 *  @return An ImageList object containing the camera images analyzed to create this Frame.
 *  @since 2.1
 */
function LeapImage[] LeapFrame.images() = "LeapFrame_images";

/**
 * The change of position derived from the overall linear motion between
 * the current frame and the specified frame.
 *
 * The returned translation vector provides the magnitude and direction of
 * the movement in millimeters.
 *
 * \include Frame_translation.txt
 *
 * The Leap Motion software derives frame translation from the linear motion of
 * all objects detected in the field of view.
 *
 * If either this frame or sinceFrame is an invalid Frame object, then this
 * method returns a zero vector.
 *
 * @param sinceFrame The starting frame for computing the relative translation.
 * @returns A Vector representing the heuristically determined change in
 * position of all objects between the current frame and that specified
 * in the sinceFrame parameter.
 * @since 1.0
 */
function Vec3 LeapFrame.translation(LeapFrame sinceFrame) = "LeapFrame_translation";

/**
 * The estimated probability that the overall motion between the current
 * frame and the specified frame is intended to be a translating motion.
 *
 * \include Frame_translationProbability.txt
 *
 * If either this frame or sinceFrame is an invalid Frame object, then this
 * method returns zero.
 *
 * @param sinceFrame The starting frame for computing the translation.
 * @returns A value between 0 and 1 representing the estimated probability
 * that the overall motion between the current frame and the specified frame
 * is intended to be a translating motion.
 * @since 1.0
 */
function Float32 LeapFrame.translationProbability(LeapFrame sinceFrame) = "LeapFrame_translationProbability";

/**
 * The axis of rotation derived from the overall rotational motion between
 * the current frame and the specified frame.
 *
 * The returned direction vector is normalized.
 *
 * \include Frame_rotationAxis.txt
 *
 * The Leap Motion software derives frame rotation from the relative change in position and
 * orientation of all objects detected in the field of view.
 *
 * If either this frame or sinceFrame is an invalid Frame object, or if no
 * rotation is detected between the two frames, a zero vector is returned.
 *
 * @param sinceFrame The starting frame for computing the relative rotation.
 * @returns A normalized direction Vector representing the axis of the
 * heuristically determined rotational change between the current frame
 * and that specified in the sinceFrame parameter.
 * @since 1.0
 */
function Vec3 LeapFrame.rotationAxis(LeapFrame sinceFrame) = "LeapFrame_rotationAxis";

/**
 * The angle of rotation around the rotation axis derived from the overall
 * rotational motion between the current frame and the specified frame.
 *
 * The returned angle is expressed in radians measured clockwise around the
 * rotation axis (using the right-hand rule) between the start and end frames.
 * The value is always between 0 and pi radians (0 and 180 degrees).
 *
 * \include Frame_rotationAngle.txt
 *
 * The Leap Motion software derives frame rotation from the relative change in position and
 * orientation of all objects detected in the field of view.
 *
 * If either this frame or sinceFrame is an invalid Frame object, then the
 * angle of rotation is zero.
 *
 * @param sinceFrame The starting frame for computing the relative rotation.
 * @returns A positive value containing the heuristically determined
 * rotational change between the current frame and that specified in the
 * sinceFrame parameter.
 * @since 1.0
 */
function Float32 LeapFrame.rotationAngle(LeapFrame sinceFrame) = "LeapFrame_rotationAngle";

/**
 * The angle of rotation around the specified axis derived from the overall
 * rotational motion between the current frame and the specified frame.
 *
 * The returned angle is expressed in radians measured clockwise around the
 * rotation axis (using the right-hand rule) between the start and end frames.
 * The value is always between -pi and pi radians (-180 and 180 degrees).
 *
 * \include Frame_rotationAngle_axis.txt
 *
 * The Leap Motion software derives frame rotation from the relative change in position and
 * orientation of all objects detected in the field of view.
 *
 * If either this frame or sinceFrame is an invalid Frame object, then the
 * angle of rotation is zero.
 *
 * @param sinceFrame The starting frame for computing the relative rotation.
 * @param axis The axis to measure rotation around.
 * @returns A value containing the heuristically determined rotational
 * change between the current frame and that specified in the sinceFrame
 * parameter around the given axis.
 * @since 1.0
 */
function Float32 LeapFrame.rotationAngle(LeapFrame sinceFrame, Vec3 axis) = "LeapFrame_rotationAngle_withAxis";

/**
 * The transform matrix expressing the rotation derived from the overall
 * rotational motion between the current frame and the specified frame.
 *
 * \include Frame_rotationMatrix.txt
 *
 * The Leap Motion software derives frame rotation from the relative change in position and
 * orientation of all objects detected in the field of view.
 *
 * If either this frame or sinceFrame is an invalid Frame object, then this
 * method returns an identity matrix.
 *
 * @param sinceFrame The starting frame for computing the relative rotation.
 * @returns A transformation Matrix containing the heuristically determined
 * rotational change between the current frame and that specified in the
 * sinceFrame parameter.
 * @since 1.0
 */
function Mat44 LeapFrame.rotationMatrix(LeapFrame sinceFrame) = "LeapFrame_rotationMatrix";

/**
 * The estimated probability that the overall motion between the current
 * frame and the specified frame is intended to be a rotating motion.
 *
 * \include Frame_rotationProbability.txt
 *
 * If either this frame or sinceFrame is an invalid Frame object, then this
 * method returns zero.
 *
 * @param sinceFrame The starting frame for computing the relative rotation.
 * @returns A value between 0 and 1 representing the estimated probability
 * that the overall motion between the current frame and the specified frame
 * is intended to be a rotating motion.
 * @since 1.0
 */
function Float32 LeapFrame.rotationProbability(LeapFrame sinceFrame) = "LeapFrame_rotationProbability";

/**
 * The scale factor derived from the overall motion between the current frame
 * and the specified frame.
 *
 * The scale factor is always positive. A value of 1.0 indicates no
 * scaling took place. Values between 0.0 and 1.0 indicate contraction
 * and values greater than 1.0 indicate expansion.
 *
 * \include Frame_scaleFactor.txt
 *
 * The Leap Motion software derives scaling from the relative inward or outward motion of
 * all objects detected in the field of view (independent of translation
 * and rotation).
 *
 * If either this frame or sinceFrame is an invalid Frame object, then this
 * method returns 1.0.
 *
 * @param sinceFrame The starting frame for computing the relative scaling.
 * @returns A positive value representing the heuristically determined
 * scaling change ratio between the current frame and that specified in the
 * sinceFrame parameter.
 * @since 1.0
 */
function Float32 LeapFrame.scaleFactor(LeapFrame sinceFrame) = "LeapFrame_scaleFactor";

/**
 * The estimated probability that the overall motion between the current
 * frame and the specified frame is intended to be a scaling motion.
 *
 * \include Frame_scaleProbability.txt
 *
 * If either this frame or sinceFrame is an invalid Frame object, then this
 * method returns zero.
 *
 * @param sinceFrame The starting frame for computing the relative scaling.
 * @returns A value between 0 and 1 representing the estimated probability
 * that the overall motion between the current frame and the specified frame
 * is intended to be a scaling motion.
 * @since 1.0
 */
function Float32 LeapFrame.scaleProbability(LeapFrame sinceFrame) = "LeapFrame_scaleProbability";

/**
 * The current InteractionBox for the frame. See the InteractionBox class
 * documentation for more details on how this class should be used.
 *
 * \include Frame_interactionBox.txt
 *
 * @returns The current InteractionBox object.
 * @since 1.0
 */
function LeapInteractionBox LeapFrame.interactionBox() = "LeapFrame_interactionBox";

/**
 * The instantaneous framerate.
 *
 * The rate at which the Leap Motion software is providing frames of data
 * (in frames per second). The framerate can fluctuate depending on available computing
 * resources, activity within the device field of view, software tracking settings,
 * and other factors.
 *
 * \include Frame_currentFramesPerSecond.txt
 *
 * @returns An estimate of frames per second of the Leap Motion Controller.
 * @since 1.0
 */
function Float32 LeapFrame.currentFramesPerSecond() = "LeapFrame_currentFramesPerSecond";

/**
 * Reports whether this Frame instance is valid.
 *
 * A valid Frame is one generated by the Leap::Controller object that contains
 * tracking data for all detected entities. An invalid Frame contains no
 * actual tracking data, but you can call its functions without risk of a
 * null pointer exception. The invalid Frame mechanism makes it more
 * convenient to track individual data across the frame history. For example,
 * you can invoke:
 *
 * \include Frame_Valid_Chain.txt
 *
 * for an arbitrary Frame history value, "n", without first checking whether
 * frame(n) returned a null object. (You should still check that the
 * returned Finger instance is valid.)
 *
 * @returns True, if this is a valid Frame object; false otherwise.
 * @since 1.0
 */
function Boolean LeapFrame.isValid() = "LeapFrame_isValid";

/**
 * Encodes this Frame object as a byte string.
 *
 * \include Frame_serialize.txt
 *
 * @returns The serialized string encoding the data for this frame.
 * @since 2.1.0
 */
function String LeapFrame.serialize() = "LeapFrame_serialize";

/**
 * Decodes a byte string to replace the properties of this Frame.
 *
 * A Controller object must be instantiated for this function to succeed, but 
 * it does not need to be connected. 
 * 
 * Any existing data in the frame is
 * destroyed. If you have references to 
 * child objects (hands, fingers, etc.), these are preserved as long as the 
 * references remain in scope.
 *
 * \include Frame_deserialize.txt
 *
 * **Note:** The behavior when calling functions which take
 * another Frame object as a parameter is undefined when either frame has
 * been deserialized. For example, calling ``gestures(sinceFrame)`` on a
 * deserialized frame or with a deserialized frame as parameter (or both)
 * does not necessarily return all gestures that occured between the two
 * frames. Motion functions, like ``scaleFactor(startFrame)``, are more
 * likely to return reasonable results, but could return anomalous values
 * in some cases.
 *
 * @since 2.1.0
 */
function LeapFrame.deserialize(String str) = "LeapFrame_deserialize";
