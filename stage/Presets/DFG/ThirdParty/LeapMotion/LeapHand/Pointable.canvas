// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* The Pointable object with the specified ID associated with this hand.\n\n* Use the Hand::pointable() function to retrieve a Pointable object\n* associated with this hand using an ID value obtained from a previous frame.\n* This function always returns a Pointable object, but if no finger\n* with the specified ID is present, an invalid Pointable object is returned.\n\n* \\include Hand_Get_Pointable_ByID.txt\n\n* Note that the ID values assigned to fingers are based on the hand ID.\n* Hand IDs persist across frames, but only until\n* tracking of that hand is lost. If tracking of the hand is lost and subsequently\n* regained, the new Hand object and its child Finger objects will have a\n* different ID than in an earlier frame.\n\n* @param id The ID value of a Pointable object from a previous frame.\n* @returns The Pointable object with the matching ID if one exists for this\n* hand in this frame; otherwise, an invalid Pointable object is returned.\n* @since 1.0\n\n\n Supported by LeapHand"
    },
  "title" : "Pointable",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapHand"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "id",
      "execPortType" : "In",
      "typeSpec" : "SInt32"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "LeapPointable"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "FA195BB75E9C747B8C1581FFFB8B2FF8",
  "code" : "require LeapMotion;\n\ndfgEntry {\n  result = this.pointable(id);\n}\n"
  }