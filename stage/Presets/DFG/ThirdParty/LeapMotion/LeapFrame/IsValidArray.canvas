// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* Reports whether this Frame instance is valid.\n\n* A valid Frame is one generated by the Leap::Controller object that contains\n* tracking data for all detected entities. An invalid Frame contains no\n* actual tracking data, but you can call its functions without risk of a\n* null pointer exception. The invalid Frame mechanism makes it more\n* convenient to track individual data across the frame history. For example,\n* you can invoke:\n\n* \\include Frame_Valid_Chain.txt\n\n* for an arbitrary Frame history value, \"n\", without first checking whether\n* frame(n) returned a null object. (You should still check that the\n* returned Finger instance is valid.)\n\n* @returns True, if this is a valid Frame object; false otherwise.\n* @since 1.0\n\n\n Supported by LeapFrame"
    },
  "title" : "IsValid[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapFrame[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "Boolean[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "6F30B67C37F159D78A01329D98A4084D",
  "code" : "require LeapMotion;\n\noperator LeapMotion_LeapFrame_isValid_task<<<index>>>(\n  io Boolean[] result\n, in LeapFrame[] this\n) {\n  result[index] = this[index < this.size() ? index : this.size() - 1].isValid();\n}\n\ndfgEntry {\n  if( this.size() == 0) return;\n  Size task_size = this.size();\n  result.resize(task_size);\n  if(task_size < 10000 /* pex margin */) {\n    for(Size index = 0; index < task_size; index++) {\n      LeapMotion_LeapFrame_isValid_task(index, result, this);\n    }\n  } else {\n    LeapMotion_LeapFrame_isValid_task<<<task_size>>>(result, this);\n  }\n}\n"
  }