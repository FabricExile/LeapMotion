// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* Converts a position defined by normalized InteractionBox coordinates into device\n* coordinates in millimeters.\n\n* \\include InteractionBox_denormalizePoint.txt\n\n* This function performs the inverse of normalizePoint().\n\n* @param normalizedPosition The input position in InteractionBox coordinates.\n* @returns The corresponding denormalized position in device coordinates.\n* @since 1.0\n\nSupported types:\n  this: LeapInteractionBox\n  normalizedPosition: Vec3\n  result: Vec3\n"
    },
  "title" : "DenormalizePoint[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapInteractionBox[]"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 255,\n  \"g\" : 242,\n  \"b\" : 0\n  }"
        },
      "nodePortType" : "Out",
      "defaultValues" : {
        "Vec3[]" : [
          {
            "x" : 0,
            "y" : 0,
            "z" : 0
            }
          ]
        },
      "name" : "normalizedPosition",
      "execPortType" : "In",
      "typeSpec" : "Vec3[]"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 255,\n  \"g\" : 242,\n  \"b\" : 0\n  }"
        },
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "Vec3[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "5F488E535112CC6531F383134858C587",
  "code" : "require LeapMotion;

operator LeapMotion_LeapInteractionBox_denormalizePoint_task<<<index>>>(
  io Vec3[] result
, in LeapInteractionBox[] this
, in Vec3[] normalizedPosition
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].denormalizePoint(normalizedPosition[index < normalizedPosition.size() ? index : normalizedPosition.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( normalizedPosition.size() == 0) return;
  Size task_size = this.size();
  if(task_size < normalizedPosition.size()) task_size = normalizedPosition.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      LeapMotion_LeapInteractionBox_denormalizePoint_task(index, result, this, normalizedPosition);
    }
  } else {
    LeapMotion_LeapInteractionBox_denormalizePoint_task<<<task_size>>>(result, this, normalizedPosition);
  }
}
"
  }