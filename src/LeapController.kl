/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

/**
 * The Controller class is your main interface to the Leap Motion Controller.
 *
 * Create an instance of this Controller class to access frames of tracking
 * data and configuration information. Frame data can be polled at any time
 * using the Controller::frame() function. Call frame() or frame(0) to get the
 * most recent frame. Set the history parameter to a positive integer to access
 * previous frames. A controller stores up to 60 frames in its frame history.
 *
 * Polling is an appropriate strategy for applications which already have an
 * intrinsic update loop, such as a game. You can also add an instance of a
 * subclass of Leap::Listener to the controller to handle events as they occur.
 * The Controller dispatches events to the listener upon initialization and exiting,
 * on connection changes, when the application gains and loses the OS input focus,
 * and when a new frame of tracking data is available.
 * When these events occur, the controller object invokes the appropriate
 * callback function defined in your subclass of Listener.
 *
 * To access frames of tracking data as they become available:
 *
 * 1. Implement a subclass of the Listener class and override the
 *    Listener::onFrame() function.
 * 2. In your Listener::onFrame() function, call the Controller::frame()
 *    function to access the newest frame of tracking data.
 * 3. To start receiving frames, create a Controller object and add an instance
 *    of the Listener subclass to the Controller::addListener() function.
 *
 * When an instance of a Listener subclass is added to a Controller object,
 * it calls the Listener::onInit() function when the listener is ready for use.
 * When a connection is established between the controller and the Leap Motion software,
 * the controller calls the Listener::onConnect() function. At this point, your
 * application will start receiving frames of data. The controller calls the
 * Listener::onFrame() function each time a new frame is available. If the
 * controller loses its connection with the Leap Motion software or device for any
 * reason, it calls the Listener::onDisconnect() function. If the listener is
 * removed from the controller or the controller is destroyed, it calls the
 * Listener::onExit() function. At that point, unless the listener is added to
 * another controller again, it will no longer receive frames of tracking data.
 *
 * The Controller object is multithreaded and calls the Listener functions on
 * its own thread, not on an application thread.
 */
object LeapController {
  /// \internal
  Data handle;
};

/// \internal
function LeapController() = "LeapController_Construct";

/// \internal
function ~LeapController() = "LeapController_Destruct";

/// returns true if this controller is valid
function Boolean LeapController.valid() {
  Data nullData;
  return this.handle == nullData;
}

/**
 * Reports whether this Controller is connected to the Leap Motion service and
 * the Leap Motion hardware is plugged in.
 *
 * When you first create a Controller object, isConnected() returns false.
 * After the controller finishes initializing and connects to the Leap Motion
 * software and if the Leap Motion hardware is plugged in, isConnected() returns true.
 *
 * You can either handle the onConnect event using a Listener instance or
 * poll the isConnected() function if you need to wait for your
 * application to be connected to the Leap Motion software before performing some other
 * operation.
 *
 * \include Controller_isConnected.txt
 * @returns True, if connected; false otherwise.
 * @since 1.0
 */
function Boolean LeapController.isConnected() = "LeapController_isConnected";

/**
 * Reports whether your application has a connection to the Leap Motion
 * daemon/service. Can be true even if the Leap Motion hardware is not available.
 * @since 1.2
 */
function Boolean LeapController.isServiceConnected() = "LeapController_isServiceConnected";

/**
 * Reports whether this application is the focused, foreground application.
 *
 * By default, your application only receives tracking information from
 * the Leap Motion controller when it has the operating system input focus.
 * To receive tracking data when your application is in the background,
 * the background frames policy flag must be set.
 *
 * \include Controller_hasFocus.txt
 *
 * @returns True, if application has focus; false otherwise.
 *
 * @see Controller::setPolicyFlags()
 * @since 1.0
 */
function Boolean LeapController.hasFocus() = "LeapController_hasFocus";

/**
 * The supported controller policies.
 *
 * The supported policy flags are:
 *
 * **LEAP_POLICY_BACKGROUND_FRAMES** -- requests that your application receives frames
 *   when it is not the foreground application for user input.
 *
 *   The background frames policy determines whether an application
 *   receives frames of tracking data while in the background. By
 *   default, the Leap Motion  software only sends tracking data to the foreground application.
 *   Only applications that need this ability should request the background
 *   frames policy. The "Allow Background Apps" checkbox must be enabled in the
 *   Leap Motion Control Panel or this policy will be denied.
 *
 * **LEAP_POLICY_IMAGES** -- request that your application receives images from the
 *   device cameras. The "Allow Images" checkbox must be enabled in the
 *   Leap Motion Control Panel or this policy will be denied.
 *
 *   The images policy determines whether an application recieves image data from
 *   the Leap Motion sensors which each frame of data. By default, this data is
 *   not sent. Only applications that use the image data should request this policy.
 *
 *
 * **LEAP_POLICY_OPTIMIZE_HMD** -- request that the tracking be optimized for head-mounted
 *   tracking.
 *   
 *   The optimize HMD policy improves tracking in situations where the Leap
 *   Motion hardware is attached to a head-mounted display. This policy is
 *   not granted for devices that cannot be mounted to an HMD, such as 
 *   Leap Motion controllers embedded in a laptop or keyboard.
 *
 * Some policies can be denied if the user has disabled the feature on
 * their Leap Motion control panel.
 *
 * @since 1.0
 */

/**
 * The default policy.
 * @since 1.0
 */
const UInt32 LEAP_POLICY_DEFAULT = 0;
/**
 * Receive background frames.
 * @since 1.0
 */
const UInt32 LEAP_POLICY_BACKGROUND_FRAMES = (1 << 0);

/**
 * Receive raw images from sensor cameras.
 * @since 2.1.0
 */
const UInt32 LEAP_POLICY_IMAGES = (1 << 1);

/**
 * Optimize the tracking for head-mounted device.
 * @since 2.1.2
 */
const UInt32 LEAP_POLICY_OPTIMIZE_HMD = (1 << 2);

/**
 * Gets the active policy settings.
 *
 * Use this function to determine the current policy state.
 * Keep in mind that setting a policy flag is asynchronous, so changes are
 * not effective immediately after calling setPolicyFlag(). In addition, a
 * policy request can be declined by the user. You should always set the
 * policy flags required by your application at startup and check that the
 * policy change request was successful after an appropriate interval.
 *
 * If the controller object is not connected to the Leap Motion software, then the default
 * policy state is returned.
 *
 * \include Controller_policyFlags.txt
 *
 * @returns The current policy flags.
 * @since 1.0
 */
function UInt32 LeapController.policyFlags() = "LeapController_policyFlags";

/**
 * Requests a change in policy.
 *
 * A request to change a policy is subject to user approval and a policy
 * can be changed by the user at any time (using the Leap Motion settings dialog).
 * The desired policy flags must be set every time an application runs.
 *
 * Policy changes are completed asynchronously and, because they are subject
 * to user approval or system compatibility checks, may not complete successfully. Call
 * Controller::policyFlags() after a suitable interval to test whether
 * the change was accepted.
 *
 * \include Controller_setPolicyFlags.txt
 *
 * @param flags A PolicyFlag value indicating the policies to request.
 * @since 1.0
 */
function LeapController.setPolicyFlags(UInt32 flags) = "LeapController_setPolicyFlags";

/**
 * Returns a frame of tracking data from the Leap Motion software. Use the optional
 * history parameter to specify which frame to retrieve. Call frame() or
 * frame(0) to access the most recent frame; call frame(1) to access the
 * previous frame, and so on. If you use a history value greater than the
 * number of stored frames, then the controller returns an invalid frame.
 *
 * \include Controller_Frame_1.txt
 *
 * You can call this function in your Listener implementation to get frames at the
 * Leap Motion frame rate:
 *
 * \include Controller_Listener_onFrame.txt

 * @param history The age of the frame to return, counting backwards from
 * the most recent frame (0) into the past and up to the maximum age (59).
 * @returns The specified frame; or, if no history parameter is specified,
 * the newest frame. If a frame is not available at the specified history
 * position, an invalid Frame is returned.
 * @since 1.0
 */
function LeapFrame LeapController.frame(SInt32 history) = "LeapController_frame";

function LeapFrame LeapController.frame() {
  return this.frame(0);
}

/**
 * Returns a Config object, which you can use to query the Leap Motion system for
 * configuration information.
 *
 * \include Controller_config.txt
 *
 * @returns The Controller's Config object.
 * @since 1.0
 */
function LeapConfig LeapController.config() = "LeapController_config";

/**
 * The list of currently attached and recognized Leap Motion controller devices.
 *
 * The Device objects in the list describe information such as the range and
 * tracking volume.
 *
 * \include Controller_devices.txt
 *
 * Currently, the Leap Motion Controller only allows a single active device at a time,
 * however there may be multiple devices physically attached and listed here.  Any active
 * device(s) are guaranteed to be listed first, however order is not determined beyond that.
 *
 * @returns The list of Leap Motion controllers.
 * @since 1.0
 */
function LeapDevice[] LeapController.devices() = "LeapController_devices";

/*
 * Deprecated as of version 1.2.
 */
function LeapScreen[] LeapController.locatedScreens() = "LeapController_locatedScreens";

/**
 * Enables or disables reporting of a specified gesture type.
 *
 * By default, all gesture types are disabled. When disabled, gestures of the
 * disabled type are never reported and will not appear in the frame
 * gesture list.
 *
 * \include Controller_enableGesture.txt
 *
 * As a performance optimization, only enable recognition for the types
 * of movements that you use in your application.
 *
 * @param type The type of gesture to enable or disable. Must be a
 * member of the Gesture::Type enumeration.
 * @param enable True, to enable the specified gesture type; False,
 * to disable.
 * @see Controller::isGestureEnabled()
 * @since 1.0
 */
function LeapController.enableGesture(UInt32 gesture, Boolean enable) = "LeapController_enableGesture";

/**
 * Reports whether the specified gesture type is enabled.
 *
 * \include Controller_isGestureEnabled.txt
 *
 * @param type The type of gesture to check; a member of the UInt32 enumeration.
 * @returns True, if the specified type is enabled; false, otherwise.
 * @see Controller::enableGesture()
 * @since 1.0
 */
function Boolean LeapController.isGestureEnabled(UInt32 gesture) = "LeapController_isGestureEnabled";
