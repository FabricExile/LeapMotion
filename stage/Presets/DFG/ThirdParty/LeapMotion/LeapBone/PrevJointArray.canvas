// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "< Bone at the tip of the finger\n* The base of the bone, closest to the wrist.\n\n* In anatomical terms, this is the proximal end of the bone.\n\n* \\include Bone_prevJoint.txt\n\n* @returns The Vector containing the coordinates of the previous joint position.\n* @since 2.0\n\n\n Supported by LeapBone"
    },
  "title" : "PrevJoint[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapBone[]"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 255,\n  \"g\" : 242,\n  \"b\" : 0\n  }"
        },
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "Vec3[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "FBD3A94F71A40E804236629E588F1013",
  "code" : "require LeapMotion;

operator LeapMotion_LeapBone_prevJoint_task<<<index>>>(
  io Vec3[] result
, in LeapBone[] this
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].prevJoint();
}

dfgEntry {
  if( this.size() == 0) return;
  Size task_size = this.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      LeapMotion_LeapBone_prevJoint_task(index, result, this);
    }
  } else {
    LeapMotion_LeapBone_prevJoint_task<<<task_size>>>(result, this);
  }
}
"
  }