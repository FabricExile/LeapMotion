// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* The orthonormal basis vectors for this Bone as a Matrix.\n\n* Basis vectors specify the orientation of a bone.\n\n* **xBasis** Perpendicular to the longitudinal axis of the\n*   bone; exits the sides of the finger.\n\n* **yBasis or up vector** Perpendicular to the longitudinal\n*   axis of the bone; exits the top and bottom of the finger. More positive\n*   in the upward direction.\n\n* **zBasis** Aligned with the longitudinal axis of the bone.\n*   More positive toward the base of the finger.\n\n* The bases provided for the right hand use the right-hand rule; those for\n* the left hand use the left-hand rule. Thus, the positive direction of the\n* x-basis is to the right for the right hand and to the left for the left\n* hand. You can change from right-hand to left-hand rule by multiplying the\n* z basis vector by -1.\n\n* You can use the basis vectors for such purposes as measuring complex\n* finger poses and skeletal animation.\n\n* Note that converting the basis vectors directly into a quaternion\n* representation is not mathematically valid. If you use quaternions,\n* create them from the derived rotation matrix not directly from the bases.\n\n* \\include Bone_basis.txt\n\n* @returns The basis of the bone as a matrix.\n* @since 2.0\n\n\n Supported by LeapBone"
    },
  "title" : "Basis[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapBone[]"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 249,\n  \"g\" : 157,\n  \"b\" : 28\n  }"
        },
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "Mat44[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "BF21B82AB07B7193FA269DAB0A27DFB8",
  "code" : "require LeapMotion;\n\noperator LeapMotion_LeapBone_basis_task<<<index>>>(\n  io Mat44[] result\n, in LeapBone[] this\n) {\n  result[index] = this[index < this.size() ? index : this.size() - 1].basis();\n}\n\ndfgEntry {\n  if( this.size() == 0) return;\n  Size task_size = this.size();\n  result.resize(task_size);\n  if(task_size < 10000 /* pex margin */) {\n    for(Size index = 0; index < task_size; index++) {\n      LeapMotion_LeapBone_basis_task(index, result, this);\n    }\n  } else {\n    LeapMotion_LeapBone_basis_task<<<task_size>>>(result, this);\n  }\n}\n"
  }