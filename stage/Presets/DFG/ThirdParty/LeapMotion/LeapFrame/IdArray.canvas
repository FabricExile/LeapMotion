// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* A unique ID for this Frame.\n\n* Consecutive frames processed by the Leap Motion software have consecutive\n* increasing values. You can use the frame ID to avoid processing the same\n* Frame object twice:\n\n* \\include Frame_Duplicate.txt\n\n* As well as to make sure that your application processes every frame:\n\n* \\include Frame_Skipped.txt\n\n* @returns The frame ID.\n* @since 1.0\n\nSupported types:\n  this: LeapFrame\n  result: UInt64\n"
    },
  "title" : "Id[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapFrame[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "UInt64[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "049BC50CA3D6212C75FDF6422524B45F",
  "code" : "require LeapMotion;

operator LeapMotion_LeapFrame_id_task<<<index>>>(
  io UInt64[] result
, in LeapFrame[] this
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].id();
}

dfgEntry {
  if( this.size() == 0) return;
  Size task_size = this.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      LeapMotion_LeapFrame_id_task(index, result, this);
    }
  } else {
    LeapMotion_LeapFrame_id_task<<<task_size>>>(result, this);
  }
}
"
  }