// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* The angle of rotation around the specified axis derived from the overall\n* rotational motion between the current frame and the specified frame.\n\n* The returned angle is expressed in radians measured clockwise around the\n* rotation axis (using the right-hand rule) between the start and end frames.\n* The value is always between -pi and pi radians (-180 and 180 degrees).\n\n* \\include Frame_rotationAngle_axis.txt\n\n* The Leap Motion software derives frame rotation from the relative change in position and\n* orientation of all objects detected in the field of view.\n\n* If either this frame or sinceFrame is an invalid Frame object, then the\n* angle of rotation is zero.\n\n* @param sinceFrame The starting frame for computing the relative rotation.\n* @param axis The axis to measure rotation around.\n* @returns A value containing the heuristically determined rotational\n* change between the current frame and that specified in the sinceFrame\n* parameter around the given axis.\n* @since 1.0\n\n\n Supported by LeapFrame"
    },
  "title" : "RotationAngle[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapFrame[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "sinceFrame",
      "execPortType" : "In",
      "typeSpec" : "LeapFrame[]"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 255,\n  \"g\" : 242,\n  \"b\" : 0\n  }"
        },
      "nodePortType" : "Out",
      "defaultValues" : {
        "Vec3[]" : [
          {
            "x" : 0,
            "y" : 0,
            "z" : 0
            }
          ]
        },
      "name" : "axis",
      "execPortType" : "In",
      "typeSpec" : "Vec3[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "Float32[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "24DD66C62C1AD0E6CB6B9E649D97595B",
  "code" : "require LeapMotion;

operator LeapMotion_LeapFrame_rotationAngle_task<<<index>>>(
  io Float32[] result
, in LeapFrame[] this
, in LeapFrame[] sinceFrame
, in Vec3[] axis
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].rotationAngle(sinceFrame[index < sinceFrame.size() ? index : sinceFrame.size() - 1], axis[index < axis.size() ? index : axis.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( sinceFrame.size() == 0) return;
  if( axis.size() == 0) return;
  Size task_size = this.size();
  if(task_size < sinceFrame.size()) task_size = sinceFrame.size();
  if(task_size < axis.size()) task_size = axis.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      LeapMotion_LeapFrame_rotationAngle_task(index, result, this, sinceFrame, axis);
    }
  } else {
    LeapMotion_LeapFrame_rotationAngle_task<<<task_size>>>(result, this, sinceFrame, axis);
  }
}
"
  }