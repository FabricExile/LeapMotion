// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* Returns a frame of tracking data from the Leap Motion software. Use the optional\n* history parameter to specify which frame to retrieve. Call frame() or\n* frame(0) to access the most recent frame; call frame(1) to access the\n* previous frame, and so on. If you use a history value greater than the\n* number of stored frames, then the controller returns an invalid frame.\n\n* \\include Controller_Frame_1.txt\n\n* You can call this function in your Listener implementation to get frames at the\n* Leap Motion frame rate:\n\n* \\include Controller_Listener_onFrame.txt\n\n* @param history The age of the frame to return, counting backwards from\n* the most recent frame (0) into the past and up to the maximum age (59).\n* @returns The specified frame; or, if no history parameter is specified,\n* the newest frame. If a frame is not available at the specified history\n* position, an invalid Frame is returned.\n* @since 1.0\n\n\n Supported by LeapController"
    },
  "title" : "Frame",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapController"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "history",
      "execPortType" : "In",
      "typeSpec" : "SInt32"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "LeapFrame"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "628FBF375B89AF019EB141C54A2CD8D5",
  "code" : "require LeapMotion;

dfgEntry {
  result = this.frame(history);
}
"
  }