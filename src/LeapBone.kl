/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
 * The Bone class represents a tracked bone.
 *
 * All fingers contain 4 bones that make up the anatomy of the finger.
 * Get valid Bone objects from a Finger object.
 *
 * Bones are ordered from base to tip, indexed from 0 to 3.  Additionally, the
 * bone's Type enum may be used to index a specific bone anatomically.
 *
 * \include Bone_iteration.txt
 *
 * The thumb does not have a base metacarpal bone and therefore contains a valid,
 * zero length bone at that location.
 *
 * Note that Bone objects can be invalid, which means that they do not contain
 * valid tracking data and do not correspond to a physical bone. Invalid Bone
 * objects can be the result of asking for a Bone object from an invalid finger,
 * indexing a bone out of range, or constructing a new bone.
 * Test for validity with the Bone::isValid() function.
 * @since 2.0
 */
object LeapBone {
  /// \internal
  Data handle;
};

/// \internal
function ~LeapBone() = "LeapBone_Destruct";

/// returns true if this controller is valid
function Boolean LeapBone.valid() {
  Data nullData;
  return this.handle == nullData;
}

/**
 * Enumerates the names of the bones.
 *
 * Members of this enumeration are returned by Bone::type() to identify a
 * Bone object.
 * @since 2.0
 */
const UInt32 LEAP_BONETYPE_METACARPAL = 0;   /**< Bone connected to the wrist inside the palm */
const UInt32 LEAP_BONETYPE_PROXIMAL = 1;     /**< Bone connecting to the palm */
const UInt32 LEAP_BONETYPE_INTERMEDIATE = 2; /**< Bone between the tip and the base*/
const UInt32 LEAP_BONETYPE_DISTAL = 3;       /**< Bone at the tip of the finger */

/**
 * The base of the bone, closest to the wrist.
 *
 * In anatomical terms, this is the proximal end of the bone.

 * \include Bone_prevJoint.txt
 *
 * @returns The Vector containing the coordinates of the previous joint position.
 * @since 2.0
 */
function Vec3 LeapBone.prevJoint() = "LeapBone_prevJoint";

/**
 * The end of the bone, closest to the finger tip.
 *
 * In anatomical terms, this is the distal end of the bone.
 *
 * \include Bone_nextJoint.txt
 *
 * @returns The Vector containing the coordinates of the next joint position.
 * @since 2.0
 */
function Vec3 LeapBone.nextJoint() = "LeapBone_nextJoint";

/**
 * The midpoint of the bone.
 *
 * \include Bone_center.txt
 *
 * @returns The midpoint in the center of the bone.
 * @since 2.0
 */
function Vec3 LeapBone.center() = "LeapBone_center";

/**
 * The normalized direction of the bone from base to tip.
 *
 * \include Bone_direction.txt
 *
 * @returns The normalized direction of the bone from base to tip.
 * @since 2.0
 */
function Vec3 LeapBone.direction() = "LeapBone_direction";

/**
 * The estimated length of the bone in millimeters.
 *
 * \include Bone_length.txt
 *
 * @returns The length of the bone in millimeters.
 * @since 2.0
 */
function Float32 LeapBone.length() = "LeapBone_length";

/**
 * The average width of the flesh around the bone in millimeters.
 *
 * \include Bone_width.txt
 *
 * @returns The width of the flesh around the bone in millimeters.
 * @since 2.0
 */
function Float32 LeapBone.width() = "LeapBone_width";

/**
 * The name of this bone.
 *
 * \include Bone_type.txt
 *
 * @returns The anatomical type of this bone as a member of the Bone::Type
 * enumeration.
 * @since 2.0
 */
function UInt32 LeapBone.boneType() = "LeapBone_boneType";

/**
 * The orthonormal basis vectors for this Bone as a Matrix.
 *
 * Basis vectors specify the orientation of a bone.
 *
 * **xBasis** Perpendicular to the longitudinal axis of the
 *   bone; exits the sides of the finger.
 *
 * **yBasis or up vector** Perpendicular to the longitudinal
 *   axis of the bone; exits the top and bottom of the finger. More positive
 *   in the upward direction.
 *
 * **zBasis** Aligned with the longitudinal axis of the bone.
 *   More positive toward the base of the finger.
 *
 * The bases provided for the right hand use the right-hand rule; those for
 * the left hand use the left-hand rule. Thus, the positive direction of the
 * x-basis is to the right for the right hand and to the left for the left
 * hand. You can change from right-hand to left-hand rule by multiplying the
 * z basis vector by -1.
 *
 * You can use the basis vectors for such purposes as measuring complex
 * finger poses and skeletal animation.
 *
 * Note that converting the basis vectors directly into a quaternion
 * representation is not mathematically valid. If you use quaternions,
 * create them from the derived rotation matrix not directly from the bases.
 *
 * \include Bone_basis.txt
 *
 * @returns The basis of the bone as a matrix.
 * @since 2.0
 */
function Mat44 LeapBone.basis() = "LeapBone_basis";
