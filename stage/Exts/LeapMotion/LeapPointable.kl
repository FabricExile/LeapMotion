/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
 * The Pointable class reports the physical characteristics of a detected finger or tool.
 *
 * Both fingers and tools are classified as Pointable objects. Use the Pointable::isFinger()
 * function to determine whether a Pointable object represents a finger. Use the
 * Pointable::isTool() function to determine whether a Pointable object represents a tool.
 * The Leap Motion software classifies a detected entity as a tool when it is thinner, straighter, and longer
 * than a typical finger.
 *
 * \include Pointable_Get_Basic.txt
 *
 * To provide touch emulation, the Leap Motion software associates a floating touch
 * plane that adapts to the user's finger movement and hand posture. The Leap Motion
 * interprets purposeful movements toward this plane as potential touch points.
 * The Pointable class reports
 * touch state with the touchZone and touchDistance values.
 *
 * Note that Pointable objects can be invalid, which means that they do not contain
 * valid tracking data and do not correspond to a physical entity. Invalid Pointable
 * objects can be the result of asking for a Pointable object using an ID from an
 * earlier frame when no Pointable objects with that ID exist in the current frame.
 * A Pointable object created from the Pointable constructor is also invalid.
 * Test for validity with the Pointable::isValid() function.
 *
 * @since 1.0
 */
object LeapPointable {
  /// \internal
  Data handle;
};

/// \internal
function ~LeapPointable() = "LeapPointable_Destruct";

/// returns true if this controller is valid
function Boolean LeapPointable.valid() {
  Data nullData;
  return this.handle == nullData;
}

/**
 * The Pointable object is too far from the plane to be
 * considered hovering or touching.
 * @since 1.0
 */
const UInt32 LEAP_POINTABLEZONE_NONE = 0;
/**
 * The Pointable object is close to, but not touching
 * the plane.
 * @since 1.0
 */
const UInt32 LEAP_POINTABLEZONE_HOVERING = 1;
/**
 * The Pointable has penetrated the plane.
 * @since 1.0
 */
const UInt32 LEAP_POINTABLEZONE_TOUCHING = 2;

/**
 * A unique ID assigned to this Pointable object, whose value remains the
 * same across consecutive frames while the tracked finger or tool remains
 * visible. If tracking is lost (for example, when a finger is occluded by
 * another finger or when it is withdrawn from the Leap Motion Controller field of view), the
 * Leap Motion software may assign a new ID when it detects the entity in a future frame.
 *
 * \include Pointable_id.txt
 *
 * Use the ID value with the Frame::pointable() function to find this
 * Pointable object in future frames.
 *
 * IDs should be from 1 to 100 (inclusive). If more than 100 objects are tracked
 * an IDs of -1 will be used until an ID in the defined range is available.
 *
 * @returns The ID assigned to this Pointable object.
 * @since 1.0
 */
function SInt32 LeapPointable.id() = "LeapPointable_id";

/**
 * The tip position in millimeters from the Leap Motion origin.
 *
 * \include Pointable_tipPosition.txt
 *
 * @returns The Vector containing the coordinates of the tip position.
 * @since 1.0
 */
function Vec3 LeapPointable.tipPosition() = "LeapPointable_tipPosition";

/**
 * The rate of change of the tip position in millimeters/second.
 *
 * \include Pointable_tipVelocity.txt
 *
 * @returns The Vector containing the coordinates of the tip velocity.
 * @since 1.0
 */
function Vec3 LeapPointable.tipVelocity() = "LeapPointable_tipVelocity";

/**
 * The direction in which this finger or tool is pointing.
 *
 * \include Pointable_direction.txt
 *
 * The direction is expressed as a unit vector pointing in the same
 * direction as the tip.
 *
 * \image html images/Leap_Finger_Model.png
 *
 * @returns The Vector pointing in the same direction as the tip of this
 * Pointable object.
 * @since 1.0
 */
function Vec3 LeapPointable.direction() = "LeapPointable_direction";

/**
 * The estimated width of the finger or tool in millimeters.
 *
 * \include Pointable_width.txt
 *
 * @returns The estimated width of this Pointable object.
 * @since 1.0
 */
function Float32 LeapPointable.width() = "LeapPointable_width";

/**
 * The estimated length of the finger or tool in millimeters.
 *
 * \include Pointable_length.txt
 *
 * @returns The estimated length of this Pointable object.
 * @since 1.0
 */
function Float32 LeapPointable.length() = "LeapPointable_length";

/**
 * Whether or not this Pointable is classified as a finger.
 *
 * \include Pointable_Conversion.txt
 *
 * @returns True, if this Pointable is classified as a finger.
 * @since 1.0
 */
function Boolean LeapPointable.isFinger() = "LeapPointable_isFinger";

/**
 * Whether or not this Pointable is classified as a tool.
 *
 * \include Pointable_Conversion.txt
 *
 * @returns True, if this Pointable is classified as a tool.
 * @since 1.0
 */
function Boolean LeapPointable.isTool() = "LeapPointable_isTool";

/**
 * Whether or not this Pointable is in an extended posture.
 *
 * A finger is considered extended if it is extended straight from the hand as if
 * pointing. A finger is not extended when it is bent down and curled towards the
 * palm.  Tools are always extended.
 *
 * \include Finger_isExtended.txt
 *
 * @returns True, if the pointable is extended.
 * @since 2.0
 */
function Boolean LeapPointable.isExtended() = "LeapPointable_isExtended";

/**
 * The current touch zone of this Pointable object.
 *
 * The Leap Motion software computes the touch zone based on a floating touch
 * plane that adapts to the user's finger movement and hand posture. The Leap
 * Motion software interprets purposeful movements toward this plane as potential touch
 * points. When a Pointable moves close to the adaptive touch plane, it enters the
 * "hovering" zone. When a Pointable reaches or passes through the plane, it enters
 * the "touching" zone.
 *
 * The possible states are present in the Zone enum of this class:
 *
 * **Zone.NONE** -- The Pointable is outside the hovering zone.
 *
 * **Zone.HOVERING** -- The Pointable is close to, but not touching the touch plane.
 *
 * **Zone.TOUCHING** -- The Pointable has penetrated the touch plane.
 *
 * The touchDistance value provides a normalized indication of the distance to
 * the touch plane when the Pointable is in the hovering or touching zones.
 *
 * \include Pointable_touchZone.txt
 *
 * @returns The touch zone of this Pointable
 * @since 1.0
 */
function UInt32 LeapPointable.touchZone() = "LeapPointable_touchZone";

/**
 * A value proportional to the distance between this Pointable object and the
 * adaptive touch plane.
 *
 * \image html images/Leap_Touch_Plane.png
 *
 * The touch distance is a value in the range [-1, 1]. The value 1.0 indicates the
 * Pointable is at the far edge of the hovering zone. The value 0 indicates the
 * Pointable is just entering the touching zone. A value of -1.0 indicates the
 * Pointable is firmly within the touching zone. Values in between are
 * proportional to the distance from the plane. Thus, the touchDistance of 0.5
 * indicates that the Pointable is halfway into the hovering zone.
 *
 * \include Pointable_touchDistance.txt
 *
 * You can use the touchDistance value to modulate visual feedback given to the
 * user as their fingers close in on a touch target, such as a button.
 *
 * @returns The normalized touch distance of this Pointable object.
 * @since 1.0
 */
function Float32 LeapPointable.touchDistance() = "LeapPointable_touchDistance";

/**
 * The stabilized tip position of this Pointable.
 *
 * Smoothing and stabilization is performed in order to make
 * this value more suitable for interaction with 2D content. The stabilized
 * position lags behind the tip position by a variable amount, depending
 * primarily on the speed of movement.
 *
 * \include Pointable_stabilizedTipPosition.txt
 *
 * @returns A modified tip position of this Pointable object
 * with some additional smoothing and stabilization applied.
 * @since 1.0
 */
function Vec3 LeapPointable.stabilizedTipPosition() = "LeapPointable_stabilizedTipPosition";

/**
 * The duration of time this Pointable has been visible to the Leap Motion Controller.
 *
 * \include Pointable_timeVisible.txt
 *
 * @returns The duration (in seconds) that this Pointable has been tracked.
 * @since 1.0
 */
function Float32 LeapPointable.timeVisible() = "LeapPointable_timeVisible";
