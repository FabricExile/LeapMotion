// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "overload to get a image by index\n\n Supported by LeapFrame"
    },
  "title" : "ImageByIndex[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "LeapFrame[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "SInt32[]" : [
          0
          ]
        },
      "name" : "index",
      "execPortType" : "In",
      "typeSpec" : "SInt32[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "LeapImage[]"
      }
    ],
  "extDeps" : {
    "LeapMotion" : "*"
    },
  "presetGUID" : "2B237F10030150474C5A8EBA4141E551",
  "code" : "require LeapMotion;

operator LeapMotion_LeapFrame_imageByIndex_task<<<index>>>(
  io LeapImage[] result
, in LeapFrame[] this
, in SInt32[] index
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].imageByIndex(index[index < index.size() ? index : index.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( index.size() == 0) return;
  Size task_size = this.size();
  if(task_size < index.size()) task_size = index.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      LeapMotion_LeapFrame_imageByIndex_task(index, result, this, index);
    }
  } else {
    LeapMotion_LeapFrame_imageByIndex_task<<<task_size>>>(result, this, index);
  }
}
"
  }