{
  "version": "1013001",
  "info": {
    "hostAppName": "Splice Standalone",
    "hostAppVersion": "1.0"
  },
  "nodes": [
    {
      "name": "DGNode",
      "dependencies": {},
      "bindings": [
        {
          "operator": {
            "name": "leapOp",
            "entry": "leapOp",
            "filename": "leapOp.kl",
            "kl": "require InlineDrawing;\nrequire LeapMotion;\n\noperator leapOp(io DrawingHandle handle, io LeapController leap, in Scalar time)\n{\n  if(handle.isEmpty()) {\n    InlineShader shader = handle.getDrawing().registerShader(OGLSurfaceShader());\n    InlineMaterial sphereMat = shader.getOrCreateMaterial('spheres');\n    sphereMat.setUniform('u_diffuseColor', Color(1.0, 0.0, 0.0));\n    InlineMaterial cylMat = shader.getOrCreateMaterial('cylinders');\n    cylMat.setUniform('u_diffuseColor', Color(0.0, 0.0, 1.0));\n    \n    PolygonMesh sphere();\n    sphere.addSphere(Xfo(), 1, 12, true, true);\n    InlineMeshShape sphereShape('sphere', sphere);\n    PolygonMesh cylinder();\n    Xfo xfo;\n    xfo.ori.setFromAxisAndAngle(Vec3(1.0, 0.0, 0.0), HALF_PI);\n    cylinder.addCylinder(xfo, 1.0, 1.0, false, 12, 1, true, true);\n    InlineMeshShape cylinderShape('cylinder', cylinder);\n    \n    InlineTransform sphereTransform = StaticInlineTransform('spheres', handle.getRootTransform(), Xfo());\n    InlineTransform cylinderTransform = StaticInlineTransform('cylinders', handle.getRootTransform(), Xfo());\n    \n    SimpleInlineInstance('spheres', sphereTransform, sphereShape, sphereMat);\n    SimpleInlineInstance('cylinders', cylinderTransform, cylinderShape, cylMat);\n  }\n  \n  if(!leap.isConnected())\n    return;\n\n  InlineTransform spheres = handle.getRootTransform().getChild('spheres');\n  InlineTransform cylinders = handle.getRootTransform().getChild('cylinders');\n  \n  Xfo sphereXfos[];\n  Xfo cylinderXfos[];\n  \n  Scalar scale = 0.05;\n  \n  LeapFrame  frame = leap.frame();\n  LeapHand hands[] = frame.hands();\n  \n  for(Size i=0;i<hands.size();i++) {\n  \n    Xfo handXfo = hands[i].basis();\n    handXfo.tr = scale * hands[i].palmPosition();\n    handXfo.sc *= scale * 0.1 * hands[i].palmWidth();\n    sphereXfos.push(handXfo);\n\n    Xfo wristXfo = hands[i].basis();\n    wristXfo.tr = scale * hands[i].wristPosition();\n    wristXfo.sc *= scale * 0.1 * hands[i].palmWidth();\n    sphereXfos.push(wristXfo);\n    \n    LeapFinger fingers[] = hands[i].fingers();\n    for(Size j=0;j<fingers.size();j++) {\n      LeapBone bones[4];\n      bones[0] = fingers[j].bone(LEAP_BONETYPE_METACARPAL);\n      bones[1] = fingers[j].bone(LEAP_BONETYPE_PROXIMAL);\n      bones[2] = fingers[j].bone(LEAP_BONETYPE_INTERMEDIATE);\n      bones[3] = fingers[j].bone(LEAP_BONETYPE_DISTAL);\n      \n      for(Size k=0;k<bones.size();k++) {\n        Xfo xfo = bones[k].basis();\n        xfo.tr = scale * bones[k].prevJoint();\n        xfo.sc = Vec3(1, 1, 1) *  scale * 0.2 * bones[k].width();\n        sphereXfos.push(xfo);\n\n        xfo.tr = scale * bones[k].center();\n        Scalar s = 0.1 * bones[k].width();\n        xfo.sc = scale * Vec3(s, s, bones[k].length());\n        cylinderXfos.push(xfo);\n\n        if(k < 3)\n          continue;\n          \n        xfo.tr = scale * bones[k].nextJoint();\n        xfo.sc = Vec3(1, 1, 1) * scale * 0.3 * bones[k].width();\n        sphereXfos.push(xfo);\n      }\n    }\n  }\n  \n  spheres.setLocalCount(sphereXfos.size());\n  cylinders.setLocalCount(cylinderXfos.size());\n  \n  for(Size i=0;i<sphereXfos.size();i++)\n    spheres.setLocalXfo(i, sphereXfos[i]);\n  for(Size i=0;i<cylinderXfos.size();i++)\n    cylinders.setLocalXfo(i, cylinderXfos[i]);\n    \n}\n",
            "portmap": {}
          }
        }
      ]
    }
  ],
  "extensions": [
    "LeapMotion"
  ],
  "ports": [
    {
      "name": "handle",
      "node": "DGNode",
      "graph": "03_Hands",
      "type": "DrawingHandle",
      "autoInitObjects": true,
      "member": "handle",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "leap",
      "node": "DGNode",
      "graph": "03_Hands",
      "type": "LeapController",
      "autoInitObjects": true,
      "member": "leap",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "time",
      "node": "DGNode",
      "graph": "03_Hands",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "time",
      "mode": "in",
      "persistence": false
    }
  ]
}