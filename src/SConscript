#
# Copyright 2010-2014 Fabric Software Inc. All rights reserved.
#
import platform, json, os, shutil
Import('parentEnv', 'kl2edk', 'kl', 'extSuffix', 'STAGE_DIR', 'LEAP_LIB_DIR')

extName = 'LeapMotion'

env = parentEnv.Clone()
env.Append(CPPPATH = [env.Dir('.').abspath])
env.Append(CPPPATH = [env.Dir('thirdparty').abspath])
env.Append(LIBS = ['Leap'])
env.Append(CCFLAGS = ['/EHsc'])

sources = [
  env.File('LeapMotion.fpm.json')
]
sources += env.Glob('*.kl')

cppFiles = [
  env.File('extension.cpp'),
  env.File('LeapConfig_functions.cpp'),
  env.File('LeapDevice_functions.cpp'),
  env.File('LeapImage_functions.cpp'),
  env.File('LeapArm_functions.cpp'),
  env.File('LeapBone_functions.cpp'),
  env.File('LeapFinger_functions.cpp'),
  env.File('LeapTool_functions.cpp'),
  env.File('LeapHand_functions.cpp'),
  env.File('LeapPointable_functions.cpp'),
  env.File('LeapGesture_functions.cpp'),
  env.File('LeapInteractionBox_functions.cpp'),
  env.File('LeapFrame_functions.cpp'),
  env.File('LeapController_functions.cpp')
]

headers = [
  env.File('LeapMotion.h')
]

extData = json.loads(open(sources[0].srcnode().abspath, 'r').read())
extVersion = extData['version']

extStageDir = STAGE_DIR.Dir('Exts').Dir(extName)
presetStageDir = STAGE_DIR.Dir('Presets').Dir('DFG').Dir('ThirdParty').Dir(extName)
extensionFiles = env.Install(extStageDir, [env.File(extName+'.fpm.json')] + env.Glob('*.kl'))
kl2dfgLogFile = presetStageDir.File('kl2dfg.log')
kl2edkResults = env.RunKL2EDK(headers, sources)
kl2dfgResults = env.RunKL2DFG([kl2dfgLogFile], extensionFiles)

compounds = env.Glob(os.path.join(env.Dir('#').Dir('Presets').abspath, '*.canvas'))
installedCompounds = env.Install(presetStageDir.Dir('Compounds'), compounds)

extLibFileName = env.File(extName + '-' + extSuffix)
libraryFiles = Flatten([env.SharedLibrary(extLibFileName, cppFiles)])
env.Depends(cppFiles, kl2edkResults)
env.Depends(kl2dfgResults, libraryFiles)

extensionFiles += env.Install(extStageDir, libraryFiles[0])
extensionFiles += kl2edkResults
extensionFiles += kl2dfgResults
extensionFiles += installedCompounds

thirdPartyLibs = []
if platform.system().lower().startswith('win'):
  for lib in Glob(os.path.join(LEAP_LIB_DIR, '*.dll')):
    thirdPartyLibs += env.Install(extStageDir, lib)

extensionFiles += thirdPartyLibs
env.Depends(libraryFiles, thirdPartyLibs)

env.AlwaysBuild(extensionFiles)
alias = env.Alias(extName, extensionFiles)

Return('alias')
